{"title":"DNS_self","zzzContent":"#在Mac上基于dnsmasq 和 Docker 测试多机ssh互联类应用\n\n#简介\n\n最近在修改一个发布系统,其主要功能总结起来就是通过ssh批量去多台服务器上执行一系列命令,在开发阶段,需要有很多个主机.\n\n做为一个示例,说明一下,整个系统需要有这么一些机器来模拟:\n\n>master20000.hz\nnode20001.hz\nnode20002.hz\nnode20003.hz\nnode20004.hz\nnode20005.sh\nnode20006.sh\nnode20007.sh\nnode20008.qd\nnode20009.qd\n\n其中:master20000.hz 是主控机,\\*\\*.sh是上海机房,\\*\\*.hz是杭州机房,\\*\\*.qd是青岛机房.发布系统是要测试分批次地在模拟的上海, 杭州,青岛三个机房执行发布命令.\n\n\n为了完成这个测试,我在本机是这样完成的:\n\n1. 由于需要同时运行10个以上的host,选用了Docker来做为虚拟机容器.VMWARE之类工具就排除掉了,第一个原因是太慢,你能想象同时跑上20个,30个ubuntu是什么感觉吗?第二个原因是,我不想在自己的电脑上生成几十个虚拟磁盘,一开time machine告诉我需要备份100G文件...\n\n2. 为了处理多个hostname的解析,我使用了dnsmasq来在本机搭了一个dns server服务.为什么不编辑/etc/hosts呢? 如果使用/etc/hosts,我每次加一些机器,就得在/etc/hosts里编辑一次,并且,每连一次vpn,我就要重新修改一次/etc/hosts).做为一个低劣开发中的冒牌PE,修改/etc/hosts的方案显然不够优雅.\n\n# 实现细节与配置\n\n## dnsmasq的配置\ndnsmasq的配置比较好理由,也基本不会出错;具体起来就是:\n1. 安装dnsmasq\n> brew install dnsmasq\n\n2. 修改解析文件:vim /usr/local/etc/dnsmasq.conf,添加这几行:\n\n\t>address=/hz/192.168.59.3\n\t>\n\t>address=/sh/192.168.59.3\n\t>\n\t>address=/qd/192.168.59.3\n\n其中,192.168.59.3是boot2docker生成的虚拟IP.\ndnsmasq是支持泛域名解析的,添加了hz,sh,qd这几个域名之后,\\*.hz,\\*.qd,\\*.sh就全部解析到本机啦.\n\n> renlu@newMac~#nslookup master20000.hz\n> \n>Server:\t\t127.0.0.1\n\n>Address:\t127.0.0.1#53\n\n>Name:\tmaster20000.hz\n\n>Address: 192.168.59.3\n\n\n## boot2docker的安装与相关配置\n\nboot2docker的安装是从官网下载一个pkg文件,一路next 就行了.\n安装完之后,跑一个docker先爽爽:\n>boot2docker up\n>\n>docker run -p 20000:22 -ti -v /Users:/Users  --name 'mybox' ubuntu:latest\n>\n>root@ea75ca43a304:/#apt-get update \n>\n>root@ea75ca43a304:/#apt-get install openssh-server\n>/etc/init.d/ssh start\n\n是不是感觉还不错?启动一个docker,就是秒启啊,你可以写一个脚本,哗啦哗啦地启动几十个docker主机,一点困难也没有.\n\n接下来,我们要做的是,试着连一下ssh:\n>~$ssh -p 20000  master20000.hz \n>\n>ssh: connect to host master20000.hz port 20000: Connection refused\n\n连不通.\n为啥呢,因为在mac下,端口20000并没有被成功地转发.虽然我们设置了-p 20000:22 ,但是这个只是将Virtualbox主机里的20000端口转发到了docker的22端口了,而我们在Mac下连接20000端口时,这个20000端口没有被转发到virtualbox里的20000端口.\n解决问题比较简单,修改virtualbox,让virtualbox把Mac主机上的20000端口转发到virtualbox主机里的20000端口:\n>注意这个命令运行之前,先关闭docker和boot2docker:\n>\n>~$boot2docker down\n>\n>~$VBoxManage modifyvm \"boot2docker-vm\" --natpf1 \"containerssh20000,tcp,,20000,,20000\"\n>\n\n具体原理,在下一节里细述.\n\n# 关键问题\n## 端口转发和目录共享的问题\ndocker不是一个完整的virtual machine,而是一种container(LXC).\n在Mac上,是用boot2docker来在virtualbox里跑的docker容器,在virtualbox里用docker 运行的实际的docker container.\n\n在mac下运行的docker,实际是是ssh到virtualbox里再运行了docker.因此我们应该时时记住,docker命令里的各种参数 ,是指virtualbox主机里的;比如刚才的-v /Users:/Users ,是指将virtualbox Linux主机里的/Users 目录共享到docker里的/Users目录.那为啥一个linux主机会有/Users目录呢?\n\n\t呵呵.呵呵!\n\n  因为....VirtualBox里将Mac下的/Users目录映射到了virtualbox里的/Users 目录(读者可以启动VirtualBox 看一下boot2docker-vm这个虚拟机的共享目录的设置);所以完整的映射关系是:\n\n\tMac:/Users => VirtualBox:/Users=> Docker:/Users\n\t\n同样的,我们也可以整理到端口转发这一条链路的关系是:\n\n\tssh->localhost 20000->VirtualBox VM port 20000->container port 22.\n\n将localhost 20000转发到VirtualBox VM port 20000,是我们执行'VBoxManage modifyvm \"boot2docker-vm\" --natpf1 \"containerssh20000,tcp,,20000,,20000\"'来完成的,而VirtualBox VM port 20000转到Container 22,则是我们在运行docker -p 20000:22 时完成的.\n\n## ssh私钥登陆\n\n在目前系统中,是要做到默认帐户ssh穿梭于所有主机的;到目前为止,我们还有两个问题需要解决,一是要给所有的docker添加ssh密钥,做到免密ssh,另一个,是要解决端口问题,因为目前我们的所有docker host在Mac上是绑定了不同的端口的.\n\n免密的这个相当好解决,思路就是添加了密钥之后把当前container保存为image,以再这个image启动docker.如下:\n>~$docker run -p 20000:22 -ti -v /Users:/Users  --name 'mybox' ubuntu:latest\n>root@ea75ca43a304:/#echo '{{your pub key }}' >> .ssh/authorized_keys \n>root@ea75ca43a304:/#exit\n>~$docker commit mybox ubuntu:latest //将当前的container提交为image\n>~$docker rm mybox\n>~$docker run -p 20000:22 -ti -v /Users:/Users  --name 'mybox' ubuntu:latest //重新在新的image基础上启动container\n\n现在解决第二个问题,ssh时连接不同的端口的问题,这个也非常好办,看这段丑陋无比的代码吧:\n\n\t<?php\n\tdefine(\"CURRENT_ENV\",\"dev\");\n\t$host = \"node20000.hz\";\n\t$tmp_arr = explode(\".\",$host);\n\tif(CURRENT_ENV==\"dev\") {\n   \t\t$port = intval(substr($tmp_arr[0],4));\n\t}else{\n   \t\t$port = \"22\";\n\t}\n\techo \"ssh -p $port $host\\n\";","postDate":"2018-01-01 02:03:35","postId":6,"type":"post","status":"publish","imported":false,"file":"DNS_self.md"}